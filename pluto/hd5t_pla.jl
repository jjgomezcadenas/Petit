### A Pluto.jl notebook ###
# v0.20.13

using Markdown
using InteractiveUtils

# ╔═╡ 349825ff-7ffe-4fa1-ba26-a772041f0323
begin
	using PlutoUI
	using Plots
	using Printf
	using Statistics
	using StatsBase
	using DataFrames
end

# ╔═╡ 04b446d6-f34f-11ed-2565-0b15d65b6781
PlutoUI.TableOfContents(title="HD5t Histogram Analysis", indent=true)

# ╔═╡ 871bd8bf-8e4b-40fb-a9c7-fdeb47589c5a
begin
	pdir = joinpath(ENV["PROJECTS"], "Petit")
	results_dir = joinpath(pdir, "pluto/znubb")
end

# ╔═╡ 947c237c-9852-40e9-a83f-c23666db90aa
begin
    using Pkg
    Pkg.activate(pdir)
    Pkg.instantiate()
end

# ╔═╡ a0032301-8d33-4fa7-9401-1a0c47841f3f
function ingredients(path::String)
    # this is from the Julia source code (evalfile in base/loading.jl)
    # but with the modification that it returns the module instead of the last object
    name = Symbol(basename(path))
    m = Module(name)
    Core.eval(m,
        Expr(:toplevel,
                :(eval(x) = $(Expr(:core, :eval))($name, x)),
                :(include(x) = $(Expr(:top, :include))($name, x)),
                :(include(mapexpr::Function, x) = $(Expr(:top, :include))(mapexpr, $name, x)),
                :(include($path))))
    m
end

# ╔═╡ b47f446c-db95-4c45-a399-2c1b5f751bca
begin
	jn = ingredients(string(pdir,"/src/Petit.jl"))
end

# ╔═╡ 6c59aeae-7990-4b43-8378-0de210a3291a
md"""
# HD5t Histogram Analysis

This notebook loads and visualizes the histogram data generated by the batch analysis script.
"""

# ╔═╡ ae89f5dc-e958-496a-91ac-0bd977355563
md"""
## Load Histogram Data
"""

# ╔═╡ 8a55b4a3-5cbf-48c3-b150-2bd4ad73f440
# Check if results directory exists
if !isdir(results_dir)
	md"""
	⚠️ **Warning**: Results directory not found at $(results_dir).
	
	Please run the batch analysis first:
	```bash
	julia pluto/run_hd5t.jl . --events=1000
	```
	"""
else
	files = readdir(results_dir)
	histogram_files = filter(f -> endswith(f, ".txt") && startswith(f, "HSt"), files)
	md"""
	Found $(length(histogram_files)) histogram files in $(results_dir):
	- $(join(histogram_files, "\n- "))
	"""
end

# ╔═╡ 07b4e4c1-0469-41ca-9890-bb4f990b4645
# Load all histogram collections
begin
	if isdir(results_dir)
		# Load histogram collections
		HSt1 = jn.Petit.load_histos(joinpath(results_dir, "HSt1.txt"))   # Single track
		HSt2p = jn.Petit.load_histos(joinpath(results_dir, "HSt2p.txt"))  # Two track primary
		HSt2s = jn.Petit.load_histos(joinpath(results_dir, "HSt2s.txt"))  # Two track secondary
		HSt3p = jn.Petit.load_histos(joinpath(results_dir, "HSt3p.txt"))  # Three+ track primary
		HSt3s = jn.Petit.load_histos(joinpath(results_dir, "HSt3s.txt"))  # Three+ track secondary
		
		md"""
		✅ Successfully loaded all histogram collections!
		"""
	end
end

# ╔═╡ 144d60a3-d70f-442b-a252-76178fecdbf7
md"""
## Analysis Summary
"""

# ╔═╡ 0fa67f2a-50a5-4c82-b42b-07f45f14e914
# Load and display analysis summary
begin
	if isdir(results_dir) && isfile(joinpath(results_dir, "analysis_summary.txt"))
		summary_content = read(joinpath(results_dir, "analysis_summary.txt"), String)
		Markdown.parse("```\n" * summary_content * "\n```")
	else
		md"Summary file not found."
	end
end

# ╔═╡ d1c1a8cb-a70e-480b-8f65-2cfa1a7022c3
md"""
## Single Track Events
Single track events represent the cleanest signal where all energy is deposited in a connected region.
"""

# ╔═╡ 37d7c197-0a10-4145-ab85-b5a22eae273e
md"""
## Two Track Events
Two track events show a primary track (highest energy) and a secondary track.
"""

# ╔═╡ 5248add6-0d0c-446d-8490-0ccc009fd6e9
md"""
### Primary Track (Two Track Events)
"""

# ╔═╡ d4892a5a-4488-4244-9513-8ece86d59661
md"""
### Secondary Track (Two Track Events)
"""

# ╔═╡ ceb6c086-fa7a-4265-92db-353b6380f184
md"""
## Three+ Track Events
Events with three or more tracks, showing primary and combined secondary tracks.
"""

# ╔═╡ 9956f72c-ce38-4dc3-8217-65ddb2e1f723
md"""
### Primary Track (Three+ Track Events)
"""

# ╔═╡ d98ea3d5-22bd-480d-9218-80cc7220bc07
md"""
### Secondary Tracks (Three+ Track Events)
Note: This includes all non-primary tracks combined.
"""

# ╔═╡ 38cb58a7-a752-4d9e-bda9-afa14a9bcf5c
md"""
## Comparative Analysis
"""

# ╔═╡ 149507ef-73e4-43a9-8623-8b3d65bef952
md"""
### Energy Distribution Comparison
"""

# ╔═╡ 7d65660f-6b52-48e2-afea-0edd4de33faf
md"""
### Summary Statistics Table
"""

# ╔═╡ 4bb62775-b172-4537-9087-c37cf9ea97f4
md"""
### Save plots to disk?
"""

# ╔═╡ 37a23226-4e3c-4e21-a4ee-a9aef75b2093
# Uncomment to save plots
# save_all_plots(joinpath(pdir, "znubb_plots"))

# ╔═╡ 6624fb61-e8ac-41e5-a602-c8765e21cede
md"""
## Functions
"""

# ╔═╡ 474b25f8-bd95-4389-867a-bb753dc77d45
"""
    plot_histogram_4panel(hist_dict::Dict{String, jn.Petit.Histo1d}, title_prefix::String)

Create a 4-panel plot showing x, y, z, and energy histograms.
"""
function plot_histogram_4panel(hist_dict::Dict{String, jn.Petit.Histo1d}, title_prefix::String)
    # Extract histograms
    hx = hist_dict["hx"]
    hy = hist_dict["hy"]
    hz = hist_dict["hz"]
    he = hist_dict["he"]
    
    # Create subplots
    p1 = plot(hx.centers, hx.weights, 
              seriestype=:steppost,
              xlabel="X (mm)", 
              ylabel="Counts",
              title="$title_prefix - X distribution",
              legend=false,
              linewidth=2,
              color=:blue)
    
    p2 = plot(hy.centers, hy.weights,
              seriestype=:steppost,
              xlabel="Y (mm)", 
              ylabel="Counts",
              title="$title_prefix - Y distribution",
              legend=false,
              linewidth=2,
              color=:green)
    
    p3 = plot(hz.centers, hz.weights,
              seriestype=:steppost,
              xlabel="Z (mm)", 
              ylabel="Counts",
              title="$title_prefix - Z distribution",
              legend=false,
              linewidth=2,
              color=:red)
    
    p4 = plot(he.centers, he.weights,
              seriestype=:steppost,
              xlabel="Energy (keV)", 
              ylabel="Counts",
              title="$title_prefix - Energy distribution",
              legend=false,
              linewidth=2,
              color=:purple)
    
    # Combine into 2x2 layout
    plot(p1, p2, p3, p4, layout=(2,2), size=(900, 700))
end

# ╔═╡ 1963d9dc-0cb9-4b8e-98ee-41491c6c784b
if @isdefined(HSt1)
	plot_histogram_4panel(HSt1, "Single Track")
end

# ╔═╡ 8c929794-64a4-48eb-bd85-ccfad6133b1e
if @isdefined(HSt2p)
	plot_histogram_4panel(HSt2p, "Two Track - Primary")
end

# ╔═╡ 9a89ffdc-3889-48c0-a952-ad2c36094b4c
if @isdefined(HSt2s)
	plot_histogram_4panel(HSt2s, "Two Track - Secondary")
end

# ╔═╡ df08eb9c-064d-4bcf-bde2-bcea5ef0d430
if @isdefined(HSt3p)
	plot_histogram_4panel(HSt3p, "Three+ Track - Primary")
end

# ╔═╡ 59c79d07-52a7-482e-b4f8-f29a28401b8a
if @isdefined(HSt3s)
	plot_histogram_4panel(HSt3s, "Three+ Track - Secondary")
end

# ╔═╡ 6c58a746-da45-4e39-a178-91e060b2f34b
"""
    plot_energy_comparison(hist_dicts::Vector{Tuple{String, Dict{String, jn.Petit.Histo1d}}})

Plot energy distributions from multiple histogram sets on the same plot for comparison.
"""
function plot_energy_comparison(hist_dicts::Vector{Tuple{String, Dict{String, jn.Petit.Histo1d}}})
    p = plot(xlabel="Energy (keV)", 
             ylabel="Counts", 
             title="Energy Distribution Comparison",
             legend=:topright)
    
    colors = [:blue, :red, :green, :orange, :purple]
    
    for (i, (label, hist_dict)) in enumerate(hist_dicts)
        he = hist_dict["he"]
        plot!(p, he.centers, he.weights,
              seriestype=:steppost,
              label=label,
              linewidth=2,
              color=colors[mod1(i, length(colors))])
    end
    
    return p
end

# ╔═╡ 4d0c3fe4-5e76-441d-87c7-3a840791257c
if @isdefined(HSt1) && @isdefined(HSt2p) && @isdefined(HSt3p)
	# Compare primary track energies
	primary_comparison = [
		("Single Track", HSt1),
		("Two Track Primary", HSt2p),
		("Three+ Track Primary", HSt3p)
	]
	plot_energy_comparison(primary_comparison)
end

# ╔═╡ b19304c2-600a-42d3-a430-c205f75d8f77
if @isdefined(HSt2s) && @isdefined(HSt3s)
	# Compare secondary track energies
	secondary_comparison = [
		("Two Track Secondary", HSt2s),
		("Three+ Track Secondary", HSt3s)
	]
	plot_energy_comparison(secondary_comparison)
end

# ╔═╡ aa71c155-9bed-4ad6-963e-575100094a9c
"""
    calculate_histogram_stats(h::jn.Petit.Histo1d)

Calculate basic statistics for a histogram.
"""
function calculate_histogram_stats(h::jn.Petit.Histo1d)
    # Find non-zero bins
    nonzero_indices = h.weights .> 0
    
    if sum(nonzero_indices) == 0
        return (mean=0.0, std=0.0, median=0.0, max_bin=0.0, total_counts=0.0)
    end
    
    # Calculate weighted statistics
    centers_nz = h.centers[nonzero_indices]
    weights_nz = h.weights[nonzero_indices]
    
    total_counts = sum(weights_nz)
    mean_val = sum(centers_nz .* weights_nz) / total_counts
    
    # Weighted standard deviation
    variance = sum(weights_nz .* (centers_nz .- mean_val).^2) / total_counts
    std_val = sqrt(variance)
    
    # Find maximum bin
    max_idx = argmax(h.weights)
    max_bin = h.centers[max_idx]
    
    return (mean=mean_val, std=std_val, max_bin=max_bin, total_counts=total_counts)
end

# ╔═╡ 6c148761-f9e2-4c7d-8d50-ee78bc0a8baf
"""
    create_stats_table(hist_dicts::Vector{Tuple{String, Dict{String, jn.Petit.Histo1d}}})

Create a summary statistics table for all histograms.
"""
function create_stats_table(hist_dicts::Vector{Tuple{String, Dict{String, jn.Petit.Histo1d}}})
    rows = []
    
    for (category, hist_dict) in hist_dicts
        he = hist_dict["he"]
        stats = calculate_histogram_stats(he)
        
        push!(rows, (
            Category = category,
            Mean_Energy_keV = round(stats.mean, digits=1),
            Std_keV = round(stats.std, digits=1),
            Peak_Energy_keV = round(stats.max_bin, digits=1),
            Total_Events = Int(round(stats.total_counts))
        ))
    end
    
    return DataFrame(rows)
end

# ╔═╡ faa0ee0d-447e-43f8-8ebd-d3e6c3c1df24
if @isdefined(HSt1) && @isdefined(HSt2p) && @isdefined(HSt2s) && @isdefined(HSt3p) && @isdefined(HSt3s)
	all_histograms = [
		("Single Track", HSt1),
		("Two Track Primary", HSt2p),
		("Two Track Secondary", HSt2s),
		("Three+ Track Primary", HSt3p),
		("Three+ Track Secondary", HSt3s)
	]
	
	stats_table = create_stats_table(all_histograms)
	stats_table
end

# ╔═╡ 46d3b837-c9df-4e04-98ae-611054c9ad6d
"""
    save_all_plots(output_dir::String)

Save all histogram plots to files.
"""
function save_all_plots(output_dir::String)
    if !isdir(output_dir)
        mkpath(output_dir)
    end
    
    if @isdefined(HSt1)
        p = plot_histogram_4panel(HSt1, "Single Track")
        savefig(p, joinpath(output_dir, "single_track_histograms.png"))
    end
    
    if @isdefined(HSt2p)
        p = plot_histogram_4panel(HSt2p, "Two Track - Primary")
        savefig(p, joinpath(output_dir, "two_track_primary_histograms.png"))
    end
    
    if @isdefined(HSt2s)
        p = plot_histogram_4panel(HSt2s, "Two Track - Secondary")
        savefig(p, joinpath(output_dir, "two_track_secondary_histograms.png"))
    end
    
    if @isdefined(HSt3p)
        p = plot_histogram_4panel(HSt3p, "Three+ Track - Primary")
        savefig(p, joinpath(output_dir, "three_track_primary_histograms.png"))
    end
    
    if @isdefined(HSt3s)
        p = plot_histogram_4panel(HSt3s, "Three+ Track - Secondary")
        savefig(p, joinpath(output_dir, "three_track_secondary_histograms.png"))
    end
    
    md"Plots saved to $output_dir"
end

# ╔═╡ bbc7767d-2ab4-40ff-ad2a-e1f81b6ad368
md"""
## Notes

This notebook analyzes the histogram data produced by the batch processing script. The histograms show:

1. **Spatial distributions (X, Y, Z)**: Where tracks are located in the detector
2. **Energy distributions**: The energy deposited by each track category

Key observations:
- Single track events typically show the full energy deposition
- Secondary tracks in multi-track events have lower energies
- The spatial distributions can reveal detector geometry and event topology
"""

# ╔═╡ Cell order:
# ╠═04b446d6-f34f-11ed-2565-0b15d65b6781
# ╠═871bd8bf-8e4b-40fb-a9c7-fdeb47589c5a
# ╠═947c237c-9852-40e9-a83f-c23666db90aa
# ╠═349825ff-7ffe-4fa1-ba26-a772041f0323
# ╠═a0032301-8d33-4fa7-9401-1a0c47841f3f
# ╠═b47f446c-db95-4c45-a399-2c1b5f751bca
# ╠═6c59aeae-7990-4b43-8378-0de210a3291a
# ╠═ae89f5dc-e958-496a-91ac-0bd977355563
# ╠═8a55b4a3-5cbf-48c3-b150-2bd4ad73f440
# ╠═07b4e4c1-0469-41ca-9890-bb4f990b4645
# ╠═144d60a3-d70f-442b-a252-76178fecdbf7
# ╠═0fa67f2a-50a5-4c82-b42b-07f45f14e914
# ╠═d1c1a8cb-a70e-480b-8f65-2cfa1a7022c3
# ╠═1963d9dc-0cb9-4b8e-98ee-41491c6c784b
# ╠═37d7c197-0a10-4145-ab85-b5a22eae273e
# ╠═5248add6-0d0c-446d-8490-0ccc009fd6e9
# ╠═8c929794-64a4-48eb-bd85-ccfad6133b1e
# ╠═d4892a5a-4488-4244-9513-8ece86d59661
# ╠═9a89ffdc-3889-48c0-a952-ad2c36094b4c
# ╠═ceb6c086-fa7a-4265-92db-353b6380f184
# ╠═9956f72c-ce38-4dc3-8217-65ddb2e1f723
# ╠═df08eb9c-064d-4bcf-bde2-bcea5ef0d430
# ╠═d98ea3d5-22bd-480d-9218-80cc7220bc07
# ╠═59c79d07-52a7-482e-b4f8-f29a28401b8a
# ╠═38cb58a7-a752-4d9e-bda9-afa14a9bcf5c
# ╠═149507ef-73e4-43a9-8623-8b3d65bef952
# ╠═4d0c3fe4-5e76-441d-87c7-3a840791257c
# ╠═b19304c2-600a-42d3-a430-c205f75d8f77
# ╠═7d65660f-6b52-48e2-afea-0edd4de33faf
# ╠═faa0ee0d-447e-43f8-8ebd-d3e6c3c1df24
# ╠═4bb62775-b172-4537-9087-c37cf9ea97f4
# ╠═37a23226-4e3c-4e21-a4ee-a9aef75b2093
# ╠═6624fb61-e8ac-41e5-a602-c8765e21cede
# ╠═474b25f8-bd95-4389-867a-bb753dc77d45
# ╠═6c58a746-da45-4e39-a178-91e060b2f34b
# ╠═aa71c155-9bed-4ad6-963e-575100094a9c
# ╠═6c148761-f9e2-4c7d-8d50-ee78bc0a8baf
# ╠═46d3b837-c9df-4e04-98ae-611054c9ad6d
# ╠═bbc7767d-2ab4-40ff-ad2a-e1f81b6ad368
